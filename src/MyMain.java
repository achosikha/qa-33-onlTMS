/**
 * @author Archil Sikharulidze
 * JavaDoc был создан спциально для разных оформлений, чтобы другие программисты и пользователи, могли разобраться
 * в вашем коде. Тут можно отдельно выделить автора кода и все нужные поля.
 */

/*
Multiple-line comments
We can write any amount of comments, some ideas and even documentation.
 */

// One-line comment

// В Джаве все ЯВЛЯЕТСЯ ОБЪЕКТОМ - это значит, что КОД НЕ МОЖЕТ РАБОТАТЬ БЕЗ СОЗДАНИЯ ОБЪЕКТА
// Слово class - создает объект под названием MyMain
// Название вашего главного ПУБЛИЧНОГО КЛАССА должно совпадать с названием вашего документа
public class MyMain{
    // Точка входа ENTRY-point
    // Точка входа - это сигнал вашему КОМПИЛЯТОРУ, что программу следует СЧИТЫВАТЬ ОТСЮДА, ЗДЕСЬ ОНА НАЧИНАЕТСЯ

    // 1. SandBox - "песочница", это специальное пространство, где обрабатывается ваш код, он существует отдельно от
    // вашего остального софта и других вещей;
    // 2. Ваш код не зависит от вашей системы и машины - WORA, WRITE ONCE RUN ANYWHERE
    // Byte CODE - байт-код это специальный набор директив, который создается исходя из вашего программного кода
    // Программный код - это код написанный программистом или по-другому, source code (src)
    // Байт-код содержит зачастую ЯЗЫК АССЕМБЛЕР
    // Машина понимает только бинарный язык - 00001001
    // АССЕМБЛЕР - дал определенные аббревиатуры
    // На каждом компе уже стоит маленькая программа называющаяся JVM - Java Virtual Machine, она понимает байт-код
    // И переводит его на понятный для вашей машины и системы язык
    // Поэтому, где бы вы не написали, и где бы вы не пускали - если у вас стоит Java Virtual Machine, то код будет
    // работать
    // JDK Java Development Kit минимальный набор разработки программиста - JVM Java Virtual Machine -
    // JRE Java Run-Time Environment

    // Любой рабочий код всегда лежит в документе с расширением .java
    // Любой откомпилированный код, т.е. байт-код лежит в документах с расширением .class
    // Компилятор - проверяет базовые грамматические конструкции языка, а также, подсказывает на возможные
    // логические ошибки - если у вас компилятор указывает на ОШИБКУ - попытка ее загрузить приведет
    // к ОЩИБКЕ КОМПЛЯТОРА - Compile-Time ERROR
    // Компилятор - читает весь код, если ошибок нет, загружает, если хотя бы одна ошибка есть - провал
    // Скриптовые языки на фронта/дизайна - читают каждую строчку отдельно и сразу же ее выполняют
    // Поэтому, ошибка никак не влияет на целостность проекта

    // Java Version 8 - КЛАССИКА ЖАНРА, самая распространенная версия в мире (Java 1.8)
    // Java 24 ??? - Это все крутое из Java 8 + новые штучки, var, yield... максимальное упрощение разработки
    // ОБЯЗАТЕЛЬНО ЗНАТЬ JAVA 8 + и желательно некоторые крутые штучки из 14, 17, 21, 24
    // Лямбда, record... строчками + потоками
    // То, что не приживается или считается большинством МУСОРОМ, может стать DEPRECATE
    // Если вы видите перед чем-то такую надпись, значит использование запрещено!
    public static void main(String[] args){
        // Теперь ваш документ готов к работе

        // Standard I/O (input, output)
        // System.out.
        // make() - method, на языке С++ функция, т.е. действие, метод что-то делает
        // В Джаве строчка может писаться лишь в двойных кавычках, нет исключений
        // 'ВWelcome to JAVA', `Welcome to Java`, "Welcome to Java" in JavaScript
        // JAVA - "__" только так
        System.out.println("Welcome to JAVA..."); // Выведи сообщение данное в кавычках, а после добавь невидимый символ
        // следующей строчки - print + ln (new line)
        System.out.print("This message is without NEXT LINE!");
        System.out.print("This MESSAGE COMES after previous print without NEXT LINE!");
        System.out.println(); // empty line
        // println все равно передает кое-что, и это специальный знак перехода на новую строчку \n
        System.out.println(); // empty line
        // print() нет вообще ничего, даже скрытого знака перехода на следующую строчку
        // А это не позволяется, хоть что-то надо передать
        System.out.print(""); // "" EMPTY STRING, " " - Строчка ПРОБЕЛ, "\n" - переход на следующую строчку
        System.out.print("    ");
        System.out.print("Message!");
        System.out.print("\n"); // ESCAPE SEQUENCE есть определенные знаки, которые подсказывают компилятору что сделать
        System.out.print("After - next line special symbol!\n\n\n\n\n");
    }
}